--- macosx/PlatMacOSX.cxx	(revision 39561)
+++ macosx/PlatMacOSX.cxx	(working copy)
@@ -1759,20 +1759,25 @@
     short bitToCheck = keyCode % 8;
     // Check the status of the key
     return ( keyMapIndex >> bitToCheck ) & 0x01;
      */
 }
 
 long Platform::SendScintilla(WindowID w, unsigned int msg, unsigned long wParam, long lParam) {
     return scintilla_send_message( w, msg, wParam, lParam );
 }
 
+long Platform::SendScintillaPointer(WindowID w, unsigned int msg, unsigned long wParam, void *lParam) {
+    return scintilla_send_message(w, msg, wParam,
+                                  reinterpret_cast<sptr_t>(lParam));
+}
+
 bool Platform::IsDBCSLeadByte(int /*codePage*/, char /*ch*/) {
     // TODO: Implement this for code pages != UTF-8
     return false;
 }
 
 int Platform::DBCSCharLength(int /*codePage*/, const char* /*s*/) {
     // TODO: Implement this for code pages != UTF-8
     return 1;
 }
 
@@ -1843,10 +1848,44 @@
 #endif
 }
 
 int Platform::Clamp(int val, int minVal, int maxVal) {
     if (val > maxVal)
         val = maxVal;
     if (val < minVal)
         val = minVal;
     return val;
 }
+
+#include <dlfcn.h>
+class DynamicLibraryImpl : public DynamicLibrary {
+protected:
+    void* m;
+public:
+    DynamicLibraryImpl(const char *modulePath) {
+            m = dlopen(modulePath, RTLD_LAZY);
+    }
+
+    virtual ~DynamicLibraryImpl() {
+            if (m != NULL)
+                    dlclose(m);
+    }
+
+    virtual Function FindFunction(const char *name) {
+            if (m != NULL) {
+                    void *fn_address = dlsym(m, name);
+                    if (fn_address)
+                            return static_cast<Function>(fn_address);
+                    else
+                            return NULL;
+            } else
+                    return NULL;
+    }
+
+    virtual bool IsValid() {
+            return m != NULL;
+    }
+};
+
+DynamicLibrary *DynamicLibrary::Load(const char *modulePath) {
+    return static_cast<DynamicLibrary *>( new DynamicLibraryImpl(modulePath) );
+}
