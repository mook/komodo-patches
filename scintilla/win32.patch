diff -u -r1.156 win32/ScintillaWin.cxx
--- win32/ScintillaWin.cxx	12 May 2007 00:30:55 -0000	1.156
+++ win32/ScintillaWin.cxx	23 May 2007 21:27:33 -0000
@@ -99,6 +99,8 @@
  */
 #define TOTAL_CONTROL
 
+#define DISABLE_DRAG_DROP // KOMODO
+
 // GCC has trouble with the standard COM ABI so do it the old C way with explicit vtables.
 
 const TCHAR scintillaClassName[] = TEXT("Scintilla");
@@ -122,6 +124,7 @@
 	FormatEnumerator(int pos_, CLIPFORMAT formats_[], int formatsLen_);
 };
 
+#ifndef DISABLE_DRAG_DROP
 /**
  */
 class DropSource {
@@ -148,6 +151,7 @@
 	ScintillaWin *sci;
 	DropTarget();
 };
+#endif
 
 /**
  */
@@ -169,10 +173,11 @@
 	CLIPFORMAT cfLineSelect;
 
 	HRESULT hrOle;
+#ifndef DISABLE_DRAG_DROP
 	DropSource ds;
 	DataObject dob;
 	DropTarget dt;
-
+#endif
 	static HINSTANCE hInstance;
 
 	ScintillaWin(HWND hwnd);
@@ -248,6 +253,7 @@
 	// Public for benefit of Scintilla_DirectFunction
 	virtual sptr_t WndProc(unsigned int iMessage, uptr_t wParam, sptr_t lParam);
 
+#ifndef DISABLE_DRAG_DROP
 	/// Implement IUnknown
 	STDMETHODIMP QueryInterface(REFIID riid, PVOID *ppv);
 	STDMETHODIMP_(ULONG)AddRef();
@@ -263,7 +269,7 @@
 
 	/// Implement important part of IDataObject
 	STDMETHODIMP GetData(FORMATETC *pFEIn, STGMEDIUM *pSTM);
-
+#endif
 	// External Lexers
 #ifdef SCI_LEXER
 	void SetLexerLanguage(const char *languageName);
@@ -272,14 +278,14 @@
 
 	static bool Register(HINSTANCE hInstance_);
 	static bool Unregister();
-
+#ifndef DISABLE_DRAG_DROP
 	friend class DropSource;
 	friend class DataObject;
 	friend class DropTarget;
 	bool DragIsRectangularOK(CLIPFORMAT fmt) {
 		return drag.rectangular && (fmt == cfColumnSelect);
 	}
-
+#endif
 private:
 	// For use in creating a system caret
 	bool HasCaretSizeChanged();
@@ -289,6 +295,11 @@
 	int sysCaretWidth;
 	int sysCaretHeight;
 	bool keysAlwaysUnicode;
+	
+	// XXX ActiveState drag scroll support
+	int scrollSpeed;
+	int scrollTicks;
+	void DragScroll();
 };
 
 HINSTANCE ScintillaWin::hInstance = 0;
@@ -317,11 +328,11 @@
 	hrOle = E_FAIL;
 
 	wMain = hwnd;
-
+#ifndef DISABLE_DRAG_DROP
 	dob.sci = this;
 	ds.sci = this;
 	dt.sci = this;
-
+#endif
 	sysCaretBitmap = 0;
 	sysCaretWidth = 0;
 	sysCaretHeight = 0;
@@ -362,6 +373,7 @@
 }
 
 void ScintillaWin::StartDrag() {
+#ifndef DISABLE_DRAG_DROP
 	inDragDrop = ddDragging;
 	DWORD dwEffect = 0;
 	dropWentOutside = true;
@@ -381,6 +393,7 @@
 	}
 	inDragDrop = ddNone;
 	SetDragPosition(SelectionPosition(invalidPosition));
+#endif
 }
 
 // Avoid warnings everywhere for old style casts by concentrating them here
@@ -598,7 +611,9 @@
 			ctrlID = ::GetDlgCtrlID(reinterpret_cast<HWND>(wMain.GetID()));
 			// Get Intellimouse scroll line parameters
 			GetIntelliMouseParameters();
+#ifndef DISABLE_DRAG_DROP
 			::RegisterDragDrop(MainHWND(), reinterpret_cast<IDropTarget *>(&dt));
+#endif
 			break;
 
 		case WM_COMMAND:
@@ -675,6 +690,7 @@
 		case WM_TIMER:
 			if (wParam == standardTimerID && timer.ticking) {
 				Tick();
+				DragScroll();
 			} else if (wParam == idleTimerID && idler.state) {
 				SendMessage(MainHWND(), SC_WIN_IDLE, 0, 1);
 			} else {
@@ -726,7 +742,11 @@
 				(wParam & MK_SHIFT) != 0,
 				(wParam & MK_CONTROL) != 0,
 				Platform::IsKeyDown(VK_MENU));
+#if 0
+/* when embeding in mozilla, this causes a focus on the main mozilla window
+    this is generaly bad because we do a lot of stuff there, see komodo.xul onfocus */
 			::SetFocus(MainHWND());
+#endif
 			}
 			break;
 
@@ -1125,6 +1145,41 @@
 	return contains;
 }
 
+void ScintillaWin::DragScroll() {
+#define RESET_SCROLL_TIMER(lines) \
+  scrollSpeed = (lines); \
+  scrollTicks = 2000;
+
+    if (!posDrag.IsValid()) {
+        RESET_SCROLL_TIMER(1);
+        return;
+    }
+    int posDragPosition = posDrag.Position();
+    Point dragMouse = LocationFromPosition(posDragPosition);
+    int line = pdoc->LineFromPosition(posDragPosition);
+    int currentVisibleLine = cs.DisplayFromDoc(line);
+    int lastVisibleLine = Platform::Minimum(topLine + LinesOnScreen() - 1, pdoc->LinesTotal() - 1);
+
+    if (currentVisibleLine <= topLine && topLine > 0) {
+        ScrollTo( topLine - scrollSpeed );
+    } else if (currentVisibleLine >= lastVisibleLine) {
+        ScrollTo( topLine + scrollSpeed );
+    } else {
+        RESET_SCROLL_TIMER(1);
+        return;
+    }
+    if (scrollSpeed == 1) {
+        scrollTicks -= timer.tickSize;
+        if (scrollTicks <= 0) {
+            RESET_SCROLL_TIMER(5);
+        }
+    }
+
+    SetDragPosition(SelectionPosition(PositionFromLocation(dragMouse)));
+
+#undef RESET_SCROLL_TIMER
+}
+
 void ScintillaWin::ScrollText(int linesToMove) {
 	//Platform::DebugPrintf("ScintillaWin::ScrollText %d\n", linesToMove);
 	::ScrollWindow(MainHWND(), 0,
@@ -1326,7 +1381,7 @@
 
 void ScintillaWin::InsertPasteText(const char *text, int len, SelectionPosition selStart, bool isRectangular, bool isLine) {
 	if (isRectangular) {
-		PasteRectangular(selStart, text, len);
+		PasteRectangular(selStart.Position(), text, len);
 	} else {
 		char *convertedText = 0;
 		if (convertPastes) {
@@ -1345,9 +1400,17 @@
 			}
 			if (sel.MainCaret() == insertPos) {
 				SetEmptySelection(sel.MainCaret() + len);
+                               // XXX ActiveState bug 33804
+                               if (ac.Active()) {
+                               	AutoCompleteMoveToCurrentWord();
+                               }
 			}
 		} else {
 			InsertPaste(selStart, text, len);
+	                        // XXX ActiveState bug 33804
+       	                if (ac.Active()) {
+               	                AutoCompleteMoveToCurrentWord();
+                       	}
 		}
 		delete []convertedText;
 	}
@@ -1498,6 +1561,7 @@
 
 #endif
 
+#ifndef DISABLE_DRAG_DROP
 /// Implement IUnknown
 
 STDMETHODIMP_(ULONG)FormatEnumerator_AddRef(FormatEnumerator *fe);
@@ -1805,6 +1869,7 @@
 	vtbl = vtDropTarget;
 	sci = 0;
 }
+#endif
 
 /**
  * DBCS: support Input Method Editor (IME).
@@ -2003,6 +2068,15 @@
 		break;
 	case SB_LINEDOWN:	// May move past the logical end
 		xPos += 20;
+                // ACTIVESTATE 
+		if (xPos > scrollWidth - rcText.Width()) {
+			// we are at the end according to the scroll bar.  We'll
+			// go faster since this is not really a 'scroll left by a bit'
+			// request but more a 'grow my scrollbar' request
+			xPos += 20;
+			scrollWidth = xPos + rcText.Width();
+			SetScrollBars();
+		}
 		break;
 	case SB_PAGEUP:
 		xPos -= pageWidth;
@@ -2105,6 +2179,7 @@
 	return dwEffect;
 }
 
+#ifndef DISABLE_DRAG_DROP
 /// Implement IUnknown
 STDMETHODIMP ScintillaWin::QueryInterface(REFIID riid, PVOID *ppv) {
 	*ppv = NULL;
@@ -2299,12 +2374,13 @@
 	pSTM->pUnkForRelease = 0;
 	return S_OK;
 }
+#endif
 
 bool ScintillaWin::Register(HINSTANCE hInstance_) {
 
 	hInstance = hInstance_;
 	bool result;
-
+#if 0
 	// Register the Scintilla class
 	if (IsNT()) {
 
@@ -2324,7 +2400,7 @@
 		wndclass.hIconSm = 0;
 		result = ::RegisterClassExW(&wndclass) != 0;
 	} else {
-
+#endif
 		// Register Scintilla as a normal character window
 		WNDCLASSEX wndclass;
 		wndclass.cbSize = sizeof(wndclass);
@@ -2340,7 +2416,7 @@
 		wndclass.lpszClassName = scintillaClassName;
 		wndclass.hIconSm = 0;
 		result = ::RegisterClassEx(&wndclass) != 0;
-	}
+	//}
 
 	if (result) {
 		// Register the CallTip class
diff -r -du win32/makefile win32/makefile
--- win32/makefile	2005-07-07 21:16:16.000000000 -0700
+++ win32/makefile	2007-05-01 17:00:17.000000000 -0700
@@ -60,8 +60,8 @@
 LexOthers.o LexPascal.o LexPB.o LexPerl.o LexPLM.o LexPOV.o LexPowerPro.o \
 LexPowerShell.o LexProgress.o LexPS.o LexPython.o LexR.o LexRebol.o LexRuby.o \
 LexScriptol.o LexSmalltalk.o LexSML.o LexSorcus.o LexSpecman.o LexSpice.o \
-LexSQL.o LexTACL.o LexTADS3.o LexTAL.o LexTCL.o LexTeX.o LexVB.o LexVerilog.o \
-LexVHDL.o LexYAML.o
+LexSQL.o LexTACL.o LexTADS3.o LexTAL.o LexTeX.o LexVB.o LexVerilog.o \
+LexVHDL.o LexYAML.o LexUDL.o LexXSLT.o LexTcl.o LexCoffeeScript.o
 #--Autogenerated -- end of automatically generated section
 
 SOBJS	= ScintillaWin.o ScintillaBase.o Editor.o CharClassify.o Decoration.o \
diff -r -du win32/scintilla.mak win32/scintilla.mak
--- win32/scintilla.mak	2005-05-27 04:29:46.000000000 -0700
+++ win32/scintilla.mak	2007-05-01 17:00:17.000000000 -0700
@@ -31,9 +31,9 @@
 
 !IF "$(VENDOR)"=="MICROSOFT"
 
-CC=cl
+CC=cl /nologo
 RC=rc
-LD=link
+LD=link /nologo
 
 CXXFLAGS=-Zi -TP -W4 -Zc:forScope -Zc:wchar_t -D_CRT_SECURE_NO_DEPRECATE=1
 # For something scary:-Wp64
@@ -176,14 +176,16 @@
 	$(DIR_O)\LexSpice.obj \
 	$(DIR_O)\LexSQL.obj \
 	$(DIR_O)\LexTACL.obj \
 	$(DIR_O)\LexTADS3.obj \
 	$(DIR_O)\LexTAL.obj \
-	$(DIR_O)\LexTCL.obj \
 	$(DIR_O)\LexTeX.obj \
 	$(DIR_O)\LexVB.obj \
 	$(DIR_O)\LexVerilog.obj \
 	$(DIR_O)\LexVHDL.obj \
 	$(DIR_O)\LexYAML.obj \
+	$(DIR_O)\LexTcl.obj \
+	$(DIR_O)\LexUDL.obj \
+	$(DIR_O)\LexXSLT.obj \
 
 #--Autogenerated -- end of automatically generated section
 
@@ -253,6 +255,14 @@
 $(DIR_O)\ScintillaWinS.obj: ScintillaWin.cxx
 	$(CC) $(CXXFLAGS) -DSTATIC_BUILD -c $(NAME)$@ ScintillaWin.cxx
 
+# Generate header files from Scintilla.iface
+..\include\Scintilla_gen.h: ..\include\HFacer.py ..\include\Face.py ..\include\Scintilla.iface
+	cd ..\include && python HFacer.py
+..\include\SciLexer_gen.h: ..\include\HFacer.py ..\include\Face.py ..\include\Scintilla.iface
+	cd ..\include && python HFacer.py
+..\include\Scintilla.h: ..\include\Scintilla_gen.h
+..\include\SciLexer.h: ..\include\SciLexer_gen.h
+
 # Dependencies
 
 # All lexers depend on this set of headers
@@ -431,8 +441,6 @@
 
 $(DIR_O)\LexTAL.obj: ..\src\LexTAL.cxx $(LEX_HEADERS)
 
-$(DIR_O)\LexTCL.obj: ..\src\LexTCL.cxx $(LEX_HEADERS)
-
 $(DIR_O)\LexTeX.obj: ..\src\LexTeX.cxx $(LEX_HEADERS)
 
 $(DIR_O)\LexVB.obj: ..\src\LexVB.cxx $(LEX_HEADERS)
@@ -443,6 +451,13 @@
 
 $(DIR_O)\LexYAML.obj: ..\src\LexYAML.cxx $(LEX_HEADERS)
 
+$(DIR_O)\LexTcl.obj: ..\src\LexTcl.cxx $(LEX_HEADERS)
+
+$(DIR_O)\LexUDL.obj: ..\src\LexUDL.cxx $(LEX_HEADERS)
+
+$(DIR_O)\LexXSLT.obj: ..\src\LexXSLT.cxx $(LEX_HEADERS)
+
+
 
 #--Autogenerated -- end of automatically generated section
 
diff -r -du win32/scintilla_vc6.mak win32/scintilla_vc6.mak
--- win32/scintilla_vc6.mak	2005-05-27 04:29:46.000000000 -0700
+++ win32/scintilla_vc6.mak	2007-05-01 17:00:17.000000000 -0700
@@ -44,7 +44,7 @@
 # If you have problems with lexers being linked, try removing -OPT:REF and replacing with -OPT:NOREF
 LDFLAGS=-OPT:NOWIN98 -OPT:REF
 LDDEBUG=
-LIBS=KERNEL32.lib USER32.lib GDI32.lib IMM32.lib OLE32.LIB
+LIBS=KERNEL32.lib USER32.lib GDI32.lib IMM32.lib OLE32.LIB libpcre.lib
 NOLOGO=-nologo
 
 !ELSE
@@ -189,12 +189,14 @@
 	$(DIR_O)\LexTACL.obj \
 	$(DIR_O)\LexTADS3.obj \
 	$(DIR_O)\LexTAL.obj \
-	$(DIR_O)\LexTCL.obj \
 	$(DIR_O)\LexTeX.obj \
 	$(DIR_O)\LexVB.obj \
 	$(DIR_O)\LexVerilog.obj \
 	$(DIR_O)\LexVHDL.obj \
 	$(DIR_O)\LexYAML.obj \
+	$(DIR_O)\LexTcl.obj \
+	$(DIR_O)\LexUDL.obj \
+	$(DIR_O)\LexXSLT.obj \
 
 #--Autogenerated -- end of automatically generated section
 
@@ -268,6 +270,14 @@
 $(DIR_O)\ScintillaWinS.obj: ScintillaWin.cxx
 	$(CC) $(CXXFLAGS) -DSTATIC_BUILD -c $(NAME)$@ ScintillaWin.cxx
 
+# Generate header files from Scintilla.iface
+..\include\Scintilla_gen.h: ..\include\HFacer.py ..\include\Face.py ..\include\Scintilla.iface
+	cd ..\include && python HFacer.py
+..\include\SciLexer_gen.h: ..\include\HFacer.py ..\include\Face.py ..\include\Scintilla.iface
+	cd ..\include && python HFacer.py
+..\include\Scintilla.h: ..\include\Scintilla_gen.h
+..\include\SciLexer.h: ..\include\SciLexer_gen.h
+
 # Dependencies
 
 # All lexers depend on this set of headers
@@ -464,8 +474,6 @@
 
 $(DIR_O)\LexTAL.obj: ..\src\LexTAL.cxx $(LEX_HEADERS)
 
-$(DIR_O)\LexTCL.obj: ..\src\LexTCL.cxx $(LEX_HEADERS)
-
 $(DIR_O)\LexTeX.obj: ..\src\LexTeX.cxx $(LEX_HEADERS)
 
 $(DIR_O)\LexVB.obj: ..\src\LexVB.cxx $(LEX_HEADERS)
@@ -475,6 +483,12 @@
 
 $(DIR_O)\LexYAML.obj: ..\src\LexYAML.cxx $(LEX_HEADERS)
 
+$(DIR_O)\LexTcl.obj: ..\src\LexTcl.cxx $(LEX_HEADERS)
+
+$(DIR_O)\LexUDL.obj: ..\src\LexUDL.cxx $(LEX_HEADERS)
+
+$(DIR_O)\LexXSLT.obj: ..\src\LexXSLT.cxx $(LEX_HEADERS)
+
 
 #--Autogenerated -- end of automatically generated section
 
