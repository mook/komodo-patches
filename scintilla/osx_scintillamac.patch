Index: macosx/ScintillaMacOSX.cxx
===================================================================
--- macosx/ScintillaMacOSX.cxx	(revision 19760)
+++ macosx/ScintillaMacOSX.cxx	(working copy)
@@ -233,13 +233,13 @@
 
 ScintillaMacOSX::~ScintillaMacOSX() {
     // If the window is closed and the timer is not removed,
     // A segment violation will occur when it attempts to fire the timer next.
+    Finalise();
     if ( mouseTrackingRef != NULL ) {
         ReleaseMouseTrackingRegion(mouseTrackingRef);
     }
     mouseTrackingRef = NULL;
-    SetTicking(false);
 #ifdef EXT_INPUT
     ExtInput::detach (GetViewRef());
 #endif
 }
@@ -623,6 +623,7 @@
     kFormatText,
     kFormatUnicode,
     kFormatUTF8,
+    kFormatUTF16LE,
     kFormatFile
 };
 
@@ -664,14 +666,19 @@
             CFRelease(data);
         }
     }
-    data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingUnicode, 0 );
+
+    data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingUTF16LE, 0 );
     if (data) {
-        PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1, 
-                                CFSTR("public.utf16-plain-text"),
-                                data, 0 );
+        // When created as kCFStringEncodingUTF16LE - no BOM is added, whereas
+        // if created with kCFStringEncodingUnicode - a BOM may be added.
+        // The flavor "public.utf16-plain-text" is meant to be without a BOM.
+        // Fixes http://bugs.activestate.com/show_bug.cgi?id=81340:
+        PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1,
+                                kUTTypeUTF16PlainText, data, 0 );
         CFRelease(data);
         data = NULL;
     }
+
     data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingMacRoman, 0 );
     if (data) {
         PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1, 
@@ -736,6 +743,9 @@
                     isRectangular = true;
                 }
                 else if (UTTypeConformsTo(flavorType, CFSTR("public.utf16-plain-text"))) { // this is 'utxt'
+                    format = kFormatUTF16LE;
+                }
+                else if (UTTypeConformsTo(flavorType, CFSTR("public.utf16-external-plain-text"))) { // this is 'utxt'
                     format = kFormatUnicode;
                 }
                 else if (UTTypeConformsTo(flavorType, CFSTR("public.utf8-plain-text"))) {
@@ -768,6 +778,10 @@
                             data = CFDataCreate (NULL, dataBytes, dataSize);
                             textString = CFStringCreateFromExternalRepresentation (NULL, data, kCFStringEncodingUnicode);
                             break;
+                        case kFormatUTF16LE:
+                            data = CFDataCreate (NULL, dataBytes, dataSize);
+                            textString = CFStringCreateFromExternalRepresentation (NULL, data, kCFStringEncodingUTF16LE);
+                            break;
                         case kFormatUTF8:
                             data = CFDataCreate (NULL, dataBytes, dataSize);
                             textString = CFStringCreateFromExternalRepresentation (NULL, data, kCFStringEncodingUTF8);
@@ -782,10 +815,16 @@
 PasteboardDataRetrieved:
     if (flavorTypeArray != NULL) CFRelease(flavorTypeArray);
         int newlen = 0;
     if (textString != NULL) {
-        selectedText->s = GetStringFromCFString(textString, &selectedText->len);
-        selectedText->rectangular = isRectangular;
+        if (CFStringGetLength(textString) == 0) {
+            // Bug 85437 -- GetStringFromCFString() with a zero bytes
+            // crashes on osx.
+            haveMatch = false;
+        } else {
+            selectedText->s = GetStringFromCFString(textString, &selectedText->len);
+            selectedText->rectangular = isRectangular;
+        }
         // Default allocator releases both the CFString and the UniChar buffer (text)
         CFRelease( textString );
         textString = NULL;
     }
@@ -1295,8 +1328,9 @@
     if (NULL != notifyProc)
         notifyProc (notifyObj, WM_COMMAND, 
                 (uintptr_t) ((focus ? SCEN_SETFOCUS : SCEN_KILLFOCUS) << 16),
                 (uintptr_t) GetViewRef());
+    SetTicking(focus);
 }
 
 void ScintillaMacOSX::NotifyChange() {
     if (NULL != notifyProc)
@@ -1534,9 +1568,9 @@
     pdoc->BeginUndoAction();
     ClearSelection();
     if (selectedText.rectangular) {
         SelectionPosition selStart = sel.RangeMain().Start();
-        PasteRectangular(selStart, selectedText.s, selectedText.len);
+        PasteRectangular(selStart.Position(), selectedText.s, selectedText.len);
     } else 
     if ( pdoc->InsertString( sel.RangeMain().caret.Position(), selectedText.s, selectedText.len ) ) {
         SetEmptySelection( sel.RangeMain().caret.Position() + selectedText.len );
     }
