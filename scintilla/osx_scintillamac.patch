Index: macosx/ScintillaMacOSX.cxx
===================================================================
--- macosx/ScintillaMacOSX.cxx	(revision 19760)
+++ macosx/ScintillaMacOSX.cxx	(working copy)
@@ -233,13 +233,13 @@
 
 ScintillaMacOSX::~ScintillaMacOSX() {
     // If the window is closed and the timer is not removed,
     // A segment violation will occur when it attempts to fire the timer next.
+    Finalise();
     if ( mouseTrackingRef != NULL ) {
         ReleaseMouseTrackingRegion(mouseTrackingRef);
     }
     mouseTrackingRef = NULL;
-    SetTicking(false);
 #ifdef EXT_INPUT
     ExtInput::detach (GetViewRef());
 #endif
 }
@@ -652,8 +652,17 @@
     PasteboardCreate( kPasteboardClipboard, &theClipboard );
     PasteboardClear( theClipboard );
 
     CFDataRef data = NULL;
+    if (encoding == kCFStringEncodingUTF8) {
+      data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, encoding, 0 );
+      if (data) {
+          PasteboardPutItemFlavor(theClipboard, (PasteboardItemID)1,
+                                  CFSTR("public.utf8-plain-text"),
+                                  data, 0 );
+          CFRelease(data);
+      }
+    }
     if (selectedText.rectangular) {
         // This is specific to scintilla, allows us to drag rectangular selections
         // around the document
         data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingUnicode, 0 );
@@ -665,14 +674,35 @@
         }
     }
     data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingUnicode, 0 );
     if (data) {
-        PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1, 
-                                CFSTR("public.utf16-plain-text"),
+        // Fixes http://bugs.activestate.com/show_bug.cgi?id=81340:
+        // data starts with a BOM, but the flavor "public.utf16-plain-text"
+        // is to be used when the data doesn't start with a BOM,
+        // "public.utf16-external-plain-text" when it does.
+
+        //ut16
+        PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1,
+                                CFSTR("public.utf16-external-plain-text"),
                                 data, 0 );
         CFRelease(data);
         data = NULL;
     }
+    //Bug 81340: Write out Unicode data without a BOM
+    CFIndex len = CFStringGetLength(string);
+    UniChar *p_TextBuffer = new UniChar[len + 1];
+    if (p_TextBuffer) {
+        CFStringGetCharacters(string, CFRangeMake(0, len), p_TextBuffer);
+        data = CFDataCreate(NULL, (UInt8 *)p_TextBuffer, len * sizeof(UniChar));
+        if (data) {
+            //utxt
+            PasteboardPutItemFlavor(theClipboard, (PasteboardItemID)1, 
+                                    CFSTR("public.utf16-plain-text"),
+                                    data, 0);
+            CFRelease(data);
+        }
+        delete[] p_TextBuffer;
+    }
     data = CFStringCreateExternalRepresentation ( kCFAllocatorDefault, string, kCFStringEncodingMacRoman, 0 );
     if (data) {
         PasteboardPutItemFlavor( theClipboard, (PasteboardItemID)1, 
                                 CFSTR("com.apple.traditional-mac-plain-text"),
@@ -737,8 +767,11 @@
                 }
                 else if (UTTypeConformsTo(flavorType, CFSTR("public.utf16-plain-text"))) { // this is 'utxt'
                     format = kFormatUnicode;
                 }
+                else if (UTTypeConformsTo(flavorType, CFSTR("public.utf16-external-plain-text"))) { // this is 'utxt'
+                    format = kFormatUnicode;
+                }
                 else if (UTTypeConformsTo(flavorType, CFSTR("public.utf8-plain-text"))) {
                     format = kFormatUTF8;
                 }
                 else if (UTTypeConformsTo(flavorType, CFSTR("com.apple.traditional-mac-plain-text"))) { // this is 'TEXT'
@@ -1295,8 +1328,9 @@
     if (NULL != notifyProc)
         notifyProc (notifyObj, WM_COMMAND, 
                 (uintptr_t) ((focus ? SCEN_SETFOCUS : SCEN_KILLFOCUS) << 16),
                 (uintptr_t) GetViewRef());
+    SetTicking(focus);
 }
 
 void ScintillaMacOSX::NotifyChange() {
     if (NULL != notifyProc)
@@ -1534,9 +1568,9 @@
     pdoc->BeginUndoAction();
     ClearSelection();
     if (selectedText.rectangular) {
         SelectionPosition selStart = sel.RangeMain().Start();
-        PasteRectangular(selStart, selectedText.s, selectedText.len);
+        PasteRectangular(selStart.Position(), selectedText.s, selectedText.len);
     } else 
     if ( pdoc->InsertString( sel.RangeMain().caret.Position(), selectedText.s, selectedText.len ) ) {
         SetEmptySelection( sel.RangeMain().caret.Position() + selectedText.len );
     }
